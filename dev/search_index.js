var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PartonDensity]","category":"page"},{"location":"api/#PartonDensity.input_pdf_map","page":"API","title":"PartonDensity.input_pdf_map","text":"input_pdf_map\n\nThe relevant mapping for use with QCDNUM and get_input_pdf_func.\n\n\n\n\n\n","category":"constant"},{"location":"api/#PartonDensity.AbstractPDFParams","page":"API","title":"PartonDensity.AbstractPDFParams","text":"abstract type PartonDensity.AbstractPDFParams\n\nAbstract type for any PDF parametrisation.\n\n\n\n\n\n","category":"type"},{"location":"api/#PartonDensity.BernsteinDirichletPDFParams","page":"API","title":"PartonDensity.BernsteinDirichletPDFParams","text":"struct BernsteinDirichletPDFParams <: AbstractPDFParams\n\nBernstein polynomial specification of input PDF parameters. Dirichlet-style treament. \n\nConstructors:\n\nBernsteinDirichletPDFParams(; fields...)\n\nFields:\n\nparam_type::Int64: Default: BERNSTEINDIRICHLETTYPE\nseed::Int64: Default: 0\nweights::Vector{Float64}: Default: ones(9)\nθ::Vector{Float64}: Default: rand(MersenneTwister(seed), Dirichlet(weights))\nbspoly_params::Vector{Vector{Int64}}: Default: [[0, 3], [0, 4], [1, 4]]\nbspoly_params_d::Vector{Vector{Int64}}: Default: bspoly_params\ninitial_U::Vector{Float64}: Default: ones(length(bspoly_params) - 2)\ninitial_D::Vector{Float64}: Default: ones(length(bspolyparamsd) - 2)\nU_list::Vector{Float64}: Default: getUDlist(θ[1], 2, initialU, bspolyparams)\nD_list::Vector{Float64}: Default: getUDlist(θ[2], 1, initialD, bspolyparams_d)\nλ_g1::Float64\nλ_g2::Float64\nK_g::Float64\nλ_q::Float64\nK_q::Float64\n\n\n\n\n\n","category":"type"},{"location":"api/#PartonDensity.BernsteinPDFParams","page":"API","title":"PartonDensity.BernsteinPDFParams","text":"struct BernsteinPDFParams <: AbstractPDFParams\n\nBernstein polynomial specification of input PDF parameters. Valence-style treatment. \n\nConstructors:\n\nBernsteinPDFParams(; fields...)\n\nFields:\n\nparam_type::Int64: Default: BERNSTEIN_TYPE\nbspoly_params::Vector{Vector{Int64}}: Default: [[0, 3], [0, 4], [1, 4], [0, 5]]\nbspoly_params_d::Vector{Vector{Int64}}: Default: bspoly_params\nU_weights::Vector{Float64}: Default: zeros(length(bspoly_params))\nD_weights::Vector{Float64}: Default: zeros(length(bspoly_params))\nλ_g1::Float64\nλ_g2::Float64\nK_g::Float64\nλ_q::Float64\nK_q::Float64\nseed::Int64: Default: 0\nweights::Vector{Float64}: Default: ones(7)\nU_list::Vector{Float64}: Default: getdirichletUD(Uweights, 2, seed, bspolyparams)\nD_list::Vector{Float64}: Default: getdirichletUD(Dweights, 1, seed, bspolyparams)\nθ::Vector{Float64}: Default: getdirichletsamples(Ulist, Dlist, seed, weights, bspoly_params)\n\n\n\n\n\n","category":"type"},{"location":"api/#PartonDensity.DirichletPDFParams","page":"API","title":"PartonDensity.DirichletPDFParams","text":"struct DirichletPDFParams <: AbstractPDFParams\n\nFull Dirichlet specification of input PDF parameters.\n\nConstructors:\n\nDirichletPDFParams(; fields...)\n\nFields:\n\nparam_type::Int64: Default: DIRICHLET_TYPE\nθ::AbstractVector{T} where T<:Real\nK_u::Real\nλ_u::Real: Default: (θ[1] * (K_u + 1)) / (2 - θ[1])\nK_d::Real\nλ_d::Real: Default: (θ[2] * (K_d + 1)) / (1 - θ[2])\nλ_g1::Real\nλ_g2::Real\nK_g::Real\nλ_q::Real\nK_q::Real\n\n\n\n\n\n","category":"type"},{"location":"api/#PartonDensity.QuarkCoefficients","page":"API","title":"PartonDensity.QuarkCoefficients","text":"QuarkCoefficients\n\nQuark coefficients for structure function  calculations.\n\n\n\n\n\n","category":"type"},{"location":"api/#PartonDensity.ValencePDFParams","page":"API","title":"PartonDensity.ValencePDFParams","text":"struct ValencePDFParams <: AbstractPDFParams\n\nValence specification of input PDF parameters.\n\nConstructors:\n\nValencePDFParams(; fields...)\n\nFields:\n\nparam_type::Int64: Default: VALENCE_TYPE\nλ_u::Real\nK_u::Real\nλ_d::Real\nK_d::Real\nλ_g1::Real\nλ_g2::Real\nK_g::Real\nλ_q::Real\nK_q::Real\nθ::AbstractVector{T} where T<:Real\n\n\n\n\n\n","category":"type"},{"location":"api/#PartonDensity._fun_xsec_i-Tuple{Int64, MetaData, Any, Any}","page":"API","title":"PartonDensity._fun_xsec_i","text":"_fun_xsec_i(ix iq)\n\nInput function for cross section spline. Must be wrapped for interface to SPLINT.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.dd_xsecnc_xq2-Tuple{Int64, MetaData, Array{Float64}, Array{Float64}}","page":"API","title":"PartonDensity.dd_xsecnc_xq2","text":"dd_xsecnc_xq2(charge, x_bin_cen, q2_bin_cen)\n\nDouble differential cross section for all x and  q2 bins. NB: modifications needed to include pol and order.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.dd_xsecnc_xq2_i-Tuple{Int64, MetaData, Vararg{Float64, 5}}","page":"API","title":"PartonDensity.dd_xsecnc_xq2_i","text":"dd_xsecnc_xq2_i(charge, md,  x, q2)\n\nDouble differential cross section for single  x and q2 values.  NB: modifications needed to include pol and order.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.f2_lo-Tuple{Float64, Float64}","page":"API","title":"PartonDensity.f2_lo","text":"f2_lo(x, q2)\n\nCalculate the f2_lo structure function term.  To be run after the evolution of PDFs with QCDNUM.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.fl_lo-Tuple{Float64, Float64}","page":"API","title":"PartonDensity.fl_lo","text":"fl_lo(x, q2)\n\nCalculate the fl_lo structure function term. To be run after the evolution of PDFs with QCDNUM.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.forward_model","page":"API","title":"PartonDensity.forward_model","text":"forward_model(pdf_params, qcdnum_grid, splint_params, quark_coeffs, sys_err_params, MD)\n\nGo from input PDF parameters to the expected number of events in bins.\n\n\n\n\n\n","category":"function"},{"location":"api/#PartonDensity.forward_model_init-Tuple{QCDNUM.EvolutionParams, QCDNUM.SPLINTParams}","page":"API","title":"PartonDensity.forward_model_init","text":"forward_model_init(qcdnum_grid, qcdnum_params)\n\nInitialise forward model. Initialises QCDNUM and builds weight tables to  save time in subsequent iterations. \n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.get_likelihood","page":"API","title":"PartonDensity.get_likelihood","text":"get_likelihood(pdf_params)\n\nGet a suitable likelihood for a given PDF parametrisation.\n\n!!! Note     Package BAT must be loaded, e.g. via import BAT, to use this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#PartonDensity.get_prior","page":"API","title":"PartonDensity.get_prior","text":"get_prior(pdf_params)\n\nGet a suitable prior for a given PDF parametrisation.\n\n!!! Note     Package BAT must be loaded, e.g. via import BAT, to use this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#PartonDensity.get_scaled_θ-Tuple{Float64, Float64, Float64, Float64, Vector{Float64}}","page":"API","title":"PartonDensity.get_scaled_θ","text":"get_scaled_θ(λ_u, K_u, λ_d, K_d, θ_tmp)\n\nGiven a set of Dirichlet samples, θ_tmp, scale  according to the valence params. Relevant for  ValencePDFParams.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.get_θ_val-Tuple{Random.AbstractRNG, Float64, Float64, Float64, Float64, Vector{Float64}}","page":"API","title":"PartonDensity.get_θ_val","text":"get_θ_val(rng, λ_u, K_u, λ_d, K_d, weights)\n\nGiven valance shape parameters and weights, get samples θ that are correctly scaled. Relevant for ValencePDFParams \n\nOptional RNG parameter.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.int_xtotx","page":"API","title":"PartonDensity.int_xtotx","text":"int_xtotx(pdf_params)\n\nTotal integrated momentum density. Should equal 1.\n\n\n\n\n\n","category":"function"},{"location":"api/#PartonDensity.nc_propagator-Tuple{MetaData, Float64, Float64}","page":"API","title":"PartonDensity.nc_propagator","text":"nc_propagator(md, q2, x)\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.pd_read_sim-Tuple{String, MetaData}","page":"API","title":"PartonDensity.pd_read_sim","text":"pd_read_sim(file_name)\n\nRead in the simulated truth and simulated data from HDF5 file.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.pd_write_sim-Tuple{String, Union{DirichletPDFParams, ValencePDFParams}, Dict{String, Any}, MetaData}","page":"API","title":"PartonDensity.pd_write_sim","text":"pd_write_sim(file_name, pdf_params, sim_data)\n\nStore the simulation truth and simulated data in an HDF5 file.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.plot_data_space","page":"API","title":"PartonDensity.plot_data_space","text":"plot_data_space(\n    pdf_params, sim_data, samples,\n    qcdnum_params, splint_params, quark_coeffs, md\n)\n\nCompare truth and posterior samples in the data space.\n\n!!! Note     Package Plots must be loaded, e.g. via import Plots, to use this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#PartonDensity.plot_input_pdfs","page":"API","title":"PartonDensity.plot_input_pdfs","text":"plot_input_pdfs(\n    pdf_params::Union{BernsteinPDFParams,BernsteinDirichletPDFParams};\n    xmin::Real, xmax::Real, nx::Integer\n)\n\nPlot PDFs using the given PDF parameters.\n\n!!! Note     Package Plots must be loaded, e.g. via import Plots, to use this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#PartonDensity.plot_model_space","page":"API","title":"PartonDensity.plot_model_space","text":"plot_model_space(pdf_params, samples)\n\nCompare truth and posterior samples in the model space.\n\n!!! Note     Package Plots must be loaded, e.g. via import Plots, to use this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#PartonDensity.rxsecnc_xq2-Tuple{Int64, MetaData, Array{Float64}, Array{Float64}}","page":"API","title":"PartonDensity.rxsecnc_xq2","text":"rxsecnc_xq2(x, q2, md)\n\nReduced cross section for all bins.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.rxsecnc_xq2_i-Tuple{Int64, MetaData, Vararg{Float64, 5}}","page":"API","title":"PartonDensity.rxsecnc_xq2_i","text":"rxsecnc_xq2_i(charge, md, x, q2, F2, xF3, FL)\n\nReduced cross section for single x, q2.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.x_dv_x-Tuple{Real, Real, Real}","page":"API","title":"PartonDensity.x_dv_x","text":"x_dv_x(x, λ_d, K_d)\n\nMomentum density of d valence component. Beta function     Ad x^λd (1 - x)^Kd Ad is set by λd and Kd.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.x_g_x-NTuple{7, Real}","page":"API","title":"PartonDensity.x_g_x","text":"    x_g_x(x, λ_g1, λ_g2, K_g, K_q, w1, w2)\n\nMomentum density of gluon component.     Ag1 x^λg1 (1 - x)^Kg + Ag2 x^λg2 (1 - x)^Kq Amplitudes are set by weights w1 and w2.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.x_q_x-NTuple{4, Real}","page":"API","title":"PartonDensity.x_q_x","text":"x_q_x(x, λ_q, K_q, w)\n\nMomentum density of non-valence quark component.     Aq x^λq (1 - x)^K_q  Amplitude is set by weight w\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.x_uv_x-Tuple{Real, Real, Real}","page":"API","title":"PartonDensity.x_uv_x","text":"x_uv_x(x, λ_u, K_u)\n\nMomentum density of u valence component. Beta function      Au x^λu (1-x)^Ku Au is set by λu and Ku.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.xf3_lo-Tuple{Float64, Float64}","page":"API","title":"PartonDensity.xf3_lo","text":"xf3_lo(x, q2)\n\nCalculate the xf3_lo structure function term. To be run after the evolution of PDFs with QCDNUM.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.xtotx","page":"API","title":"PartonDensity.xtotx","text":"x_total_x(x, pdf_params)\n\nTotal momentum density.\n\n\n\n\n\n","category":"function"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"EditURL = \"../../examples/zeus_interface.jl\"","category":"page"},{"location":"zeus_interface/#ZEUS-interface","page":"ZEUS interface","title":"ZEUS interface","text":"","category":"section"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"Here is a short demonstration of how to access the ZEUS transfer matrix and bin interface.","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"using PartonDensity, CSV, DelimitedFiles\n\nzeus_include_path = string(chop(pathof(PartonDensity), tail=20), \"data/ZEUS_I1787035/ZEUS_I1787035.jl\")\nsample_data_include_path = string(chop(pathof(PartonDensity), tail=20), \"data/EXAMPLE_1/HERAPDF20_NNLO_EIG_ePp.txt\")\nMD_ZEUS_I1787035=include(zeus_include_path)","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"Read in an example integrated cross section","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"numbers_from_file = readdlm(sample_data_include_path)","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"List of integrated cross section values in 429 bins","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"integ_xsec_ePp = numbers_from_file[:, 3]\ninteg_xsec_eMp = numbers_from_file[:, 3]","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"Corresponding list of expected event numbers","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"prediction_ePp, prediction_eMp = MD_ZEUS_I1787035.f_cross_section_to_counts(MD_ZEUS_I1787035.Ld_ePp, MD_ZEUS_I1787035.Ld_eMp, integ_xsec_ePp, integ_xsec_eMp)\n\ninteg_xsec_ePp[153]\n\nprediction_ePp[151]","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"","category":"page"},{"location":"zeus_interface/","page":"ZEUS interface","title":"ZEUS interface","text":"This page was generated using Literate.jl.","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"EditURL = \"../../examples/pdf_parametrisation.jl\"","category":"page"},{"location":"pdf_parametrisation/#Input-PDF-parametrisation-and-priors","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"","category":"section"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"An important part of PDF fitting is defining a useful parametrisation for the PDF shapes, as well as meaningful prior distributions that encode our knowledge of the problem.","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"In this notebook, and in the PartonDensity package, we explore two different approaches:","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"Full Dirichlet\nValence shape + Dirichlet","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"We plan to explore the implementation of more parameterisations in the future, and our package is set up in a modular way to handle this.","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"using Distributions, Plots, SpecialFunctions, Printf\nconst sf = SpecialFunctions;\nnothing #hide","category":"page"},{"location":"pdf_parametrisation/#\"Full-Dirichlet\"-approach","page":"Input PDF parametrisation and priors","title":"\"Full Dirichlet\" approach","text":"","category":"section"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"A clean way to ensure the momentum sum rule is to sample different contributions of the momentrum density integral from a Dirichlet distribution, then use these weights to set the parameters on the individual Beta distributions.","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"9 components of decreasing importance","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"dirichlet = Dirichlet([3.0, 2.0, 1, 0.5, 0.3, 0.2, 0.1, 0.1, 0.1])\ndata = rand(dirichlet, 1000);\nnothing #hide","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"Have a look","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"plot()\nfor i in 1:9\n    histogram!(data[i, :], bins=range(0, stop=1, length=20), alpha=0.7)\nend\nplot!(xlabel=\"I_i = A_i B_i\")","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"This is great as the sum rule is automatically conserved","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"sum(data, dims=1)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"But, it is still non-trivial to choose the Dirichlet weights for a sensible prior, and connect to the physics of the problem. We recommend simulating from the prior and visualising the results as a useful workflow in this case (see e.g. prior predictive checks).","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"I = rand(dirichlet)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"As we are more interested in K_u and K_d than λ_u and λ_d for our high-x data, we can set the λs according to the Ks.","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"K_u = rand(Uniform(2, 10))","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"Integral of number density must = 2, and integral of momentum density must = I[1]. This implies the following:","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"λ_u = (I[1] * (K_u + 1)) / (2 - I[1])","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"Let's check this","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"A_u = 2 / sf.beta(λ_u, K_u + 1)\n\nI[1] ≈ A_u * sf.beta(λ_u + 1, K_u + 1)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"While this approach also has its advantages, it is hard to set priors on the shape of the valence distributions, as the λ_u and λ_d are now derived parameters, dependent on the specified Dirichlet weights and K_u/K_d values. However, sensible prior choices can be made using e.g. prior predictive checks, as already mentioned above.","category":"page"},{"location":"pdf_parametrisation/#\"Valence-shape-Dirichlet\"-approach","page":"Input PDF parametrisation and priors","title":"\"Valence shape + Dirichlet\" approach","text":"","category":"section"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"An alternative approach is to specify constraints on the valence params through the shape of their Beta distributions, then using a Dirichlet to specify the weights of the gluon and sea components. The problem here is it isn't clear how to specify that the d contribution must be less than the u contribution. However, it is possible to do this indirectly through priors on the shape parameters. Doing so would require some further investigation.","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"x = range(0, stop=1, length=50)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"High-level priors","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"λ_u = 0.7\nK_u = 4\nλ_d = 0.5\nK_d = 6\n\nu_V = Beta(λ_u, K_u + 1)\nA_u = 2 / sf.beta(λ_u, K_u + 1)\n\nd_V = Beta(λ_d, K_d + 1)\nA_d = 1 / sf.beta(λ_d, K_d + 1)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"Integral contributions","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"I_u = A_u * sf.beta(λ_u + 1, K_u + 1)\nI_d = A_d * sf.beta(λ_d + 1, K_d + 1)\n\nplot(x, x .* A_u .* x .^ λ_u .* (1 .- x) .^ K_u * 2, alpha=0.7, label=\"x u(x)\", lw=3)\nplot!(x, x .* A_d .* x .^ λ_d .* (1 .- x) .^ K_d, alpha=0.7, label=\"x d(x)\", lw=3)\nplot!(xlabel=\"x\", legend=:topright)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"@printf(\"I_u = %.2f\\n\", I_u)\n@printf(\"I_d = %.2f\\n\", I_d)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"The remaining 7 integrals can be dirichlet-sampled with decreasing importance","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"remaining = 1 - (I_u + I_d)\ndirichlet = Dirichlet([3.0, 2.0, 1, 0.5, 0.3, 0.2, 0.1])\nI = rand(dirichlet) * remaining;\nsum(I) ≈ remaining","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"Gluon contributions","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"λ_g1 = rand(Uniform(-1, 0))\nλ_g2 = rand(Uniform(0, 1))\nK_g = rand(Uniform(2, 10))\nK_q = rand(Uniform(3, 7))\nA_g2 = I[1] / sf.beta(λ_g2 + 1, K_g + 1)\nA_g1 = I[2] / sf.beta(λ_g1 + 1, K_q + 1);\nnothing #hide","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"Sea quark contributions","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"λ_q = rand(Uniform(-1, 0))\nA_ubar = I[3] / (2 * sf.beta(λ_q + 1, K_q + 1))\nA_dbar = I[4] / (2 * sf.beta(λ_q + 1, K_q + 1))\nA_s = I[5] / (2 * sf.beta(λ_q + 1, K_q + 1))\nA_c = I[6] / (2 * sf.beta(λ_q + 1, K_q + 1))\nA_b = I[7] / (2 * sf.beta(λ_q + 1, K_q + 1));\n\ntotal = A_u * sf.beta(λ_u + 1, K_u + 1) + A_d * sf.beta(λ_d + 1, K_d + 1)\ntotal += A_g1 * sf.beta(λ_g1 + 1, K_q + 1) + A_g2 * sf.beta(λ_g2 + 1, K_g + 1)\ntotal += 2 * (A_ubar + A_dbar + A_s + A_c + A_b) * sf.beta(λ_q + 1, K_q + 1)\ntotal ≈ 1","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"x = 10 .^ range(-2, stop=0, length=500)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"How does it look?","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"xg2 = A_g2 * x .^ λ_g2 .* (1 .- x) .^ K_g\nxg1 = A_g1 * x .^ λ_g1 .* (1 .- x) .^ K_q\nplot(x, x .* A_u .* x .^ λ_u .* (1 .- x) .^ K_u * 2, alpha=0.7, label=\"x u(x)\", lw=3)\nplot!(x, x .* A_d .* x .^ λ_d .* (1 .- x) .^ K_d, alpha=0.7, label=\"x d(x)\", lw=3)\nplot!(x, xg1 + xg2, alpha=0.7, label=\"x g(x)\", lw=3)\nplot!(x, A_ubar * x .^ λ_q .* (1.0 .- x) .^ K_q, alpha=0.7, label=\"x ubar(x)\", lw=3)\nplot!(x, A_dbar * x .^ λ_q .* (1.0 .- x) .^ K_q, alpha=0.7, label=\"x dbar(x)\", lw=3)\nplot!(x, A_s * x .^ λ_q .* (1.0 .- x) .^ K_q, alpha=0.7, label=\"x s(x)\", lw=3)\nplot!(x, A_c * x .^ λ_q .* (1.0 .- x) .^ K_q, alpha=0.7, label=\"x c(x)\", lw=3)\nplot!(x, A_b * x .^ λ_q .* (1.0 .- x) .^ K_q, alpha=0.7, label=\"x b(x)\", lw=3)\nplot!(xlabel=\"x\", legend=:bottomleft, xscale=:log, ylims=(1e-8, 10), yscale=:log)","category":"page"},{"location":"pdf_parametrisation/#Prior-predictive-checks","page":"Input PDF parametrisation and priors","title":"Prior predictive checks","text":"","category":"section"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"We can start to visualise the type of PDFs that are allowed by the combination of the choice of parametrisation and prior distributions with some simple prior predictive checks, as done below for the valence style parametrisation...","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"N = 100\nalpha = 0.03\ntotal = Array{Float64,1}(undef, N)\nfirst = true\nleg = 0\n\nplot()\nfor i in 1:N\n\n    λ_u_i = rand(Uniform(0, 1))\n    K_u_i = rand(Uniform(2, 10))\n    λ_d_i = rand(Uniform(0, 1))\n    K_d_i = rand(Uniform(2, 10))\n    A_u_i = 2 / sf.beta(λ_u_i, K_u_i + 1)\n    A_d_i = 1 / sf.beta(λ_d_i, K_d_i + 1)\n    I_u_i = A_u * sf.beta(λ_u_i + 1, K_u_i + 1)\n    I_d_i = A_d * sf.beta(λ_d_i + 1, K_d_i + 1)\n    u_V_i = Beta(λ_u_i, K_u_i + 1)\n    d_V_i = Beta(λ_d_i, K_d_i + 1)\n\n    remaining_i = 1 - (I_u_i + I_d_i)\n    dirichlet_i = Dirichlet([3.0, 2.0, 1, 0.5, 0.3, 0.2, 0.1])\n    I_i = rand(dirichlet_i) * remaining_i\n\n    λ_g1_i = rand(Uniform(-1, 0))\n    λ_g2_i = rand(Uniform(0, 1))\n    K_g_i = rand(Uniform(2, 10))\n    A_g2_i = I_i[1] / sf.beta(λ_g2_i + 1, K_g_i + 1)\n    A_g1_i = I_i[2] / sf.beta(λ_g1_i + 1, 5 + 1)\n\n    λ_q_i = rand(Uniform(-1, 0))\n    K_q_i = rand(Uniform(3, 7))\n    A_ubar_i = I_i[3] / (2 * sf.beta(λ_q_i + 1, K_q_i + 1))\n    A_dbar_i = I_i[4] / (2 * sf.beta(λ_q_i + 1, K_q_i + 1))\n    A_s_i = I_i[5] / (2 * sf.beta(λ_q_i + 1, K_q_i + 1))\n    A_c_i = I_i[6] / (2 * sf.beta(λ_q_i + 1, K_q_i + 1))\n    A_b_i = I_i[7] / (2 * sf.beta(λ_q_i + 1, K_q_i + 1))\n\n    total[i] = A_u_i * sf.beta(λ_u_i + 1, K_u_i + 1) + A_d_i * sf.beta(λ_d_i + 1, K_d_i + 1)\n    total[i] += A_g1_i * sf.beta(λ_g1_i + 1, K_q_i + 1) + A_g2_i * sf.beta(λ_g2_i + 1, K_g_i + 1)\n    total[i] += 2 * (A_ubar_i + A_dbar_i + A_s_i + A_c_i + A_b_i) * sf.beta(λ_q_i + 1, K_q_i + 1)\n\n    xg2_i = A_g2_i * x .^ λ_g2_i .* (1 .- x) .^ K_g_i\n    xg1_i = A_g1_i * x .^ λ_g1_i .* (1 .- x) .^ K_q_i\n    plot!(x, [x .* A_u_i .* x .^ λ_u_i .* (1 .- x) .^ K_u_i * 2], alpha=alpha, color=\"blue\", lw=3)\n    plot!(x, x .* A_d_i .* x .^ λ_d_i .* (1 .- x) .^ K_d_i, alpha=alpha, color=\"orange\", lw=3)\n    plot!(x, xg1_i + xg2_i, alpha=alpha, color=\"green\", lw=3)\n    plot!(x, A_ubar_i * x .^ λ_q_i .* (1 .- x) .^ K_q_i, alpha=alpha, color=\"red\", lw=3)\n    plot!(x, A_dbar_i * x .^ λ_q_i .* (1 .- x) .^ K_q_i, alpha=alpha, color=\"purple\", lw=3)\n    plot!(x, A_s_i * x .^ λ_q_i .* (1 .- x) .^ K_q_i, alpha=alpha, color=\"brown\", lw=3)\n    plot!(x, A_c_i * x .^ λ_q_i .* (1 .- x) .^ K_q_i, alpha=alpha, color=\"pink\", lw=3)\n    plot!(x, A_b_i * x .^ λ_q_i .* (1 .- x) .^ K_q_i, alpha=alpha, color=\"grey\", lw=3)\nend\n\nplot!(xlabel=\"x\", ylabel=\"x f(x)\", xscale=:log, legend=false,\n    ylims=(1e-8, 10), yscale=:log)","category":"page"},{"location":"pdf_parametrisation/#PDF-Parametrisation-interface","page":"Input PDF parametrisation and priors","title":"PDF Parametrisation interface","text":"","category":"section"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"PartonDensity provides a handy interface to both the parametrisations through the DirichletPDFParams and ValencePDFParams options.","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"using PartonDensity","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"Let's try the Dirichlet specification...","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"weights_dir = [3.0, 1.0, 5.0, 5.0, 1.0, 1.0, 1.0, 0.5, 0.5]\nθ_dir = rand(Dirichlet(weights_dir))\n\npdf_params = DirichletPDFParams(K_u=4.0, K_d=6.0, λ_g1=0.7, λ_g2=-0.4,\n    K_g=6.0, λ_q=-0.5, K_q=5.0, θ=θ_dir);\n\nplot_input_pdfs(pdf_params)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"int_xtotx(pdf_params) ≈ 1","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"And now the valence specification...","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"weights_val = [5.0, 5.0, 1.0, 1.0, 1.0, 0.5, 0.5]\nλ_u = 0.7\nK_u = 4.0\nλ_d = 0.5\nK_d = 6.0\nθ_val = get_θ_val(λ_u, K_u, λ_d, K_d, weights_val)\npdf_params = ValencePDFParams(λ_u=λ_u, K_u=K_u, λ_d=λ_d, K_d=K_d, λ_g1=0.7, λ_g2=-0.4,\n    K_g=6.0, λ_q=-0.5, K_q=5.0, θ=θ_val);\n\nplot_input_pdfs(pdf_params)","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"int_xtotx(pdf_params) ≈ 1","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"","category":"page"},{"location":"pdf_parametrisation/","page":"Input PDF parametrisation and priors","title":"Input PDF parametrisation and priors","text":"This page was generated using Literate.jl.","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"EditURL = \"../../examples/forward_model.jl\"","category":"page"},{"location":"forward_model/#Forward-model","page":"Forward model","title":"Forward model","text":"","category":"section"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Here, we go through an example of simulating the full forward model, from the prior definition to the expected number of events in different bins of the detector response.","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"using QCDNUM, PartonDensity\nusing Plots, Printf, NaNMath, Parameters, Random, Distributions\n\nzeus_include_path = string(chop(pathof(PartonDensity), tail=20), \"data/ZEUS_I1787035/ZEUS_I1787035.jl\")\n\nconst MD_DOCS = include(zeus_include_path)","category":"page"},{"location":"forward_model/#Define-input-PDFs","page":"Forward model","title":"Define input PDFs","text":"","category":"section"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"We can use DirichletPDFParams or ValencePDFParams, as long as we do so according to the PDF parametrisation and priors docs.","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"random_seed = 42\n\nweights = [3.0, 1.0, 5.0, 5.0, 1.0, 1.0, 1.0, 0.5, 0.5]\nθ = rand(MersenneTwister(random_seed), Dirichlet(weights))\npdf_params = DirichletPDFParams(K_u=4.0, K_d=6.0, λ_g1=0.7, λ_g2=-0.4,\n    K_g=6.0, λ_q=-0.5, K_q=5.0, θ=θ);\nnothing #hide","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Plot the input PDFs","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"plot_input_pdfs(pdf_params)","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Sanity check that sum = 1","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"int_xtotx(pdf_params) ≈ 1","category":"page"},{"location":"forward_model/#Define-QCDNUM-grids,-weights-and-settings","page":"Forward model","title":"Define QCDNUM grids, weights and settings","text":"","category":"section"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"grid = QCDNUM.GridParams(x_min=[1.0e-3], x_weights=[1], nx=100,\n    qq_bounds=[1.0e2, 3.0e4], qq_weights=[1.0, 1.0], nq=50, spline_interp=3)\n\nqcdnum_params = QCDNUM.EvolutionParams(order=2, α_S=0.118, q0=100.0, grid_params=grid,\n    n_fixed_flav=5, iqc=1, iqb=1, iqt=1, weight_type=1);\nnothing #hide","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Initialise","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"QCDNUM.init()","category":"page"},{"location":"forward_model/#Evolve-the-PDFs-using-QCDNUM","page":"Forward model","title":"Evolve the PDFs using QCDNUM","text":"","category":"section"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Define input PDF function","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"See QCDNUM docs under evolfg","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"There are functions available to generate the necessary input PDF function in the correct format for QCDNUM.jl (see get_input_pdf_func()), along with the mapping between this input function and quark species (see input_pdf_map).","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Get function and PDF input map to fully describe the QCDNUM.InputPDF","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"my_func = get_input_pdf_func(pdf_params)\ninput_pdf = QCDNUM.InputPDF(func=my_func, map=input_pdf_map)","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Evolve the PDF over the specified grid","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"ϵ = QCDNUM.evolve(input_pdf, qcdnum_params)","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"For splines","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"nw = QCDNUM.zmfillw()\nsplint_params = QCDNUM.SPLINTParams();\nquark_coeffs = QuarkCoefficients();\nnothing #hide","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Define initial spline","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"QCDNUM.ssp_spinit(splint_params.nuser)\n\nia = QCDNUM.isp_s2make(splint_params.nsteps_x, splint_params.nsteps_q);\nxnd = QCDNUM.ssp_unodes(ia, splint_params.nnodes_x, 0);\nqnd = QCDNUM.ssp_vnodes(ia, splint_params.nnodes_q, 0);\nnothing #hide","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Check nodes and erase","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"QCDNUM.ssp_nprint(ia);\nQCDNUM.ssp_erase(ia);\nnothing #hide","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Set nodes and fill spline with structure function","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"iaFLup = QCDNUM.isp_s2user(xnd, splint_params.nnodes_x, qnd, splint_params.nnodes_q);\nQCDNUM.ssp_s2f123(iaFLup, qcdnum_params.output_pdf_loc, quark_coeffs.proup, 1, 0.0);\n\niaF2up = QCDNUM.isp_s2user(xnd, splint_params.nnodes_x, qnd, splint_params.nnodes_q);\nQCDNUM.ssp_s2f123(iaF2up, qcdnum_params.output_pdf_loc, quark_coeffs.proup, 2, 0.0);\n\niaF3up = QCDNUM.isp_s2user(xnd, splint_params.nnodes_x, qnd, splint_params.nnodes_q);\nQCDNUM.ssp_s2f123(iaF3up, qcdnum_params.output_pdf_loc, quark_coeffs.valup, 3, 0.0);\n\niaFLdn = QCDNUM.isp_s2user(xnd, splint_params.nnodes_x, qnd, splint_params.nnodes_q);\nQCDNUM.ssp_s2f123(iaFLdn, qcdnum_params.output_pdf_loc, quark_coeffs.prodn, 1, 0.0);\n\niaF2dn = QCDNUM.isp_s2user(xnd, splint_params.nnodes_x, qnd, splint_params.nnodes_q);\nQCDNUM.ssp_s2f123(iaF2dn, qcdnum_params.output_pdf_loc, quark_coeffs.prodn, 2, 0.0);\n\niaF3dn = QCDNUM.isp_s2user(xnd, splint_params.nnodes_x, qnd, splint_params.nnodes_q);\nQCDNUM.ssp_s2f123(iaF3dn, qcdnum_params.output_pdf_loc, quark_coeffs.valdn, 3, 0.0);\nnothing #hide","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"store spline addresses","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"QCDNUM.ssp_uwrite(splint_params.spline_addresses.F2up, Float64(iaF2up));\nQCDNUM.ssp_uwrite(splint_params.spline_addresses.F2dn, Float64(iaF2dn));\nQCDNUM.ssp_uwrite(splint_params.spline_addresses.F3up, Float64(iaF3up));\nQCDNUM.ssp_uwrite(splint_params.spline_addresses.F3dn, Float64(iaF3dn));\nQCDNUM.ssp_uwrite(splint_params.spline_addresses.FLup, Float64(iaFLup));\nQCDNUM.ssp_uwrite(splint_params.spline_addresses.FLdn, Float64(iaFLdn));\n\nmy_funcp = get_input_xsec_func(1, MD_DOCS) # charge = 1\nwrapped_my_funcp = WrappedSpFun(my_funcp)\n\nmy_funcm = get_input_xsec_func(-1, MD_DOCS) # charge = -1\nwrapped_my_funcm = WrappedSpFun(my_funcm)","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"plot","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"g = qcdnum_params.grid_params\nxsec_on_grid = zeros(g.nx, g.nq);\n\nfor ix = 1:g.nx\n    for iq = 1:g.nq\n        xsec_on_grid[ix, iq] = _fun_xsec_i(1, MD_DOCS, ix, iq) # charge = 1\n    end\nend\n\nqcdnum_x_grid = QCDNUM.gxcopy(g.nx)\nqcdnum_qq_grid = QCDNUM.gqcopy(g.nq)\np1 = heatmap(qcdnum_x_grid, qcdnum_qq_grid, NaNMath.log10.(xsec_on_grid[:, :]'))\nplot(p1, xlabel=\"x\", ylabel=\"q2\",\n    xaxis=:log, yaxis=:log)","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"plot(qcdnum_x_grid, NaNMath.log10.(xsec_on_grid[:, 4]),\n    label=\"Q2=141 (input scale)\", lw=3)\nplot!(qcdnum_x_grid, NaNMath.log10.(xsec_on_grid[:, 22]), label=\"Q2=1152\", lw=3)\nplot!(qcdnum_x_grid, NaNMath.log10.(xsec_on_grid[:, 35]), label=\"Q2=5233\", lw=3)\nplot!(qcdnum_x_grid, NaNMath.log10.(xsec_on_grid[:, 41]), label=\"Q2=10523\", lw=3)\nplot!(xaxis=:log, legend=:bottomleft, xlabel=\"x\",\n    ylabel=\"log10(cross section spline input)\", ylims=(-7, 5))","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"iaF_eP = QCDNUM.isp_s2make(1, 2);\nQCDNUM.ssp_uwrite(splint_params.spline_addresses.F_eP, Float64(iaF_eP));\nQCDNUM.ssp_s2fill(iaF_eP, wrapped_my_funcp, splint_params.rscut);\n\niaF_eM = QCDNUM.isp_s2make(1, 2);\nQCDNUM.ssp_uwrite(splint_params.spline_addresses.F_eM, Float64(iaF_eM));\nQCDNUM.ssp_s2fill(iaF_eM, wrapped_my_funcm, splint_params.rscut);\nnothing #hide","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"plot spline","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"spline = zeros(g.nx, g.nq);\n\nfor ix = 1:g.nx\n    for iq = 1:g.nq\n        spline[ix, iq] = QCDNUM.dsp_funs2(iaF_eP, qcdnum_x_grid[ix],\n            qcdnum_qq_grid[iq], 1)\n    end\nend\n\np1 = heatmap(qcdnum_x_grid, qcdnum_qq_grid, NaNMath.log10.(spline[:, :]'))\nplot(p1, xlabel=\"x\", ylabel=\"q2\",\n    xaxis=:log, yaxis=:log)","category":"page"},{"location":"forward_model/#Integrate-over-the-cross-section-spline-and-find-expected-events-numbers","page":"Forward model","title":"Integrate over the cross section spline and find expected events numbers","text":"","category":"section"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"Here, we neglect any possible contribution from systematic errors","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"nbins = size(MD_DOCS.m_xbins_M_begin)[1]\nIntXsec_eP = zeros(nbins);\nIntXsec_eM = zeros(nbins);\nfor i in 1:nbins\n    IntXsec_eP[i] = QCDNUM.dsp_ints2(iaF_eP, MD_DOCS.m_xbins_M_begin[i], MD_DOCS.m_xbins_M_end[i], MD_DOCS.m_q2bins_M_begin[i], MD_DOCS.m_q2bins_M_end[i], MD_DOCS.sqrtS, 4)\n    IntXsec_eM[i] = QCDNUM.dsp_ints2(iaF_eM, MD_DOCS.m_xbins_M_begin[i], MD_DOCS.m_xbins_M_end[i], MD_DOCS.m_q2bins_M_begin[i], MD_DOCS.m_q2bins_M_end[i], MD_DOCS.sqrtS, 4)\nend\n\ncounts_pred_eP, counts_pred_eM = MD_DOCS.f_cross_section_to_counts(MD_DOCS.Ld_ePp, MD_DOCS.Ld_eMp, IntXsec_eP, IntXsec_eM)\n\ncounts_pred_eM","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"","category":"page"},{"location":"forward_model/","page":"Forward model","title":"Forward model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A Bayesian approach to parton density extraction. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Hadrons, such as protons and neutrons, are made up of quarks held together by the strong force. At high energy scales, the valence quarks that define these hadrons exist in a sea of virtual quarks and gluons. The parton distribution functions (PDFs) describe this structure and are of fundamental importance to our understanding of quantum chromodynamics (QCD), as well as its application to LHC physics and the development of cosmic ray air showers in the Earth's atmosphere. PDFs can be extracted from accelerator measurements in which hadrons are probed through collisions with electrons. A limitation of existing approaches to analysing this data is the reliance on the chi-square statistic and the coupled assumption of Normal-distributed observations. We are working on a new statistical method for PDF extraction, which overcomes this limitation by forward modelling the problem from an input PDF to the expected number of events in a detector. This model will then be fit using Markov Chain Monte Carlo to enable inference of the PDF parameters. Our project builds on the QCDNUM software for fast QCD evolution and the Bayesian Analysis Toolkit for inference. We initially focus on the \"high-x\" regime and data from the ZEUS experiment, where the chi-square method cannot be used due to low event numbers.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This package uses QCDNUM.jl for fast PDF evolution and cross-section calculation and BAT.jl for Bayesian inference.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"PartonDensity.jl has been used in the following publications:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"arXiv:2209.06571\narXiv:2401.17729","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To install PartonDensity.jl, start Julia and run","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg\njulia> Pkg.add(url=\"https://github.com/cescalara/PartonDensity.jl.git\")","category":"page"},{"location":"#Usage","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Check out the examples listed in these docs! The scripts can be found in the examples directory of the GitHub repository. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To run these docs, you can follow the steps used in the GitHub workflow. In particular, we need to remember to use the latest versions of BAT.jl from GitHub. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(url=\"https://github.com/bat/BAT.jl.git\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you want to convert the example scripts to notebooks, use Literate.jl.","category":"page"},{"location":"#Development","page":"Introduction","title":"Development","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Below are the installation instruction for those who wish to contribute to the code.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Clone the github repository, e.g. via the command line:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"git clone  https://github.com/cescalara/PartonDensity.jl.git","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Enter the directory and start Julia interpreter","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"cd PartonDensity.jl\njulia","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Open the Julia package management environment pressing ].","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ]","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Execute ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> generate PartonDensity\n...... \npkg>  . dev","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Exit the package manager using backspace or pressing Ctrl+C","category":"page"}]
}
